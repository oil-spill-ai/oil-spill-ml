import logging
from pathlib import Path
import shutil

UPLOAD_DIR = Path("/tmp/uploads")
RESULT_DIR = Path("/tmp/results")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [%(levelname)s] - %(message)s"
)
logger = logging.getLogger("ml_service")

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {
    "requests_total": 0,
    "processing_time_total": 0.0
}

def log_request(filename: str):
    stats["requests_total"] += 1
    logger.info(f"üì• –ù–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")

def log_result(filename: str, duration: float):
    stats["processing_time_total"] += duration
    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {filename} –∑–∞ {duration:.2f} —Å–µ–∫")

def get_stats():
    total = stats["requests_total"]
    avg_time = stats["processing_time_total"] / total if total > 0 else 0
    return {
        "requests_total": total,
        "avg_processing_time_sec": round(avg_time, 3)
    }

def clear_tmp():
    try:
        deleted = 0
        for folder in [UPLOAD_DIR, RESULT_DIR]:
            for f in folder.glob("*"):
                if f.is_file():
                    f.unlink()
                    deleted += 1
                elif f.is_dir():
                    shutil.rmtree(f)
                    deleted += 1
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {deleted}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
